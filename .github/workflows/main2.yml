name: Automate Package Generation JWT

on: 
  push:
    branches: 
      - 'main'
  workflow_dispatch:

jobs: 
  Generate-Package:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: "14"
      
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          ref: ${{github.ref}}
          fetch-depth: 0
     
      - name: Install Salesforce CLI
        run: >        
          wget
          https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz

          mkdir ~/sfdx

          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1

          echo "$HOME/sfdx/bin" >> $GITHUB_PATH

          ~/sfdx/bin/sfdx version

      - name: Install jq
        run: |
          sudo apt-get install jq

      - name: Setup server key
        run: echo "${{ secrets.PRIVATE_KEY }}" > server.key

      - name: JWT Authentication to target Org
        run: sfdx auth:jwt:grant --client-id=${{ secrets.CONSUMER_KEY }} --jwt-key-file=server.key --username=${{ vars.USERNAME }} --set-default-dev-hub -a targetOrg devhub -d
      
      - name: Deploy Code without running tests
        run: sfdx source:deploy -x manifest/package.xml -l NoTestRun -w 1000 --verbose --loglevel fatal --json -u targetOrg -g
      
      - name: Create a package if not there
        run: |
          sfdx force:package:list -v "${{ vars.USERNAME }}" --verbose --json > response.json          
          package_found=$(jq '.result | map(. | select(.Name=="${{ vars.PACKAGE_NAME }}"))' < response.json  | head )
          echo $package_found 
          if [ $package_found == "[]" ]; then
            echo "Creating Package"
            sf package create --name "${{ vars.PACKAGE_NAME }}" --package-type Unlocked --path force-app --no-namespace --target-dev-hub devhub
          fi
      
      - name: Create package Version
        run: sf package version create --package "${{ vars.PACKAGE_NAME }}" --installation-key ${{ vars.UNLOCKED_PACKAGE_PASSWORD }} --wait 10 --target-dev-hub devhub

      - name: Update sfdx-project.json
        run: |
          git config user.name "release[bot]"
          git config user.email "<>"
          git add sfdx-project.json
          git commit -m "Updating new package version"
          git push

      - name: Promote version
        run: |
          version_id=$(grep -o "04t[[:alnum:]]\{15\}" sfdx-project.json | tail -n1)
          sfdx force:package:version:promote -p "$version_id" --noprompt 
            
        
